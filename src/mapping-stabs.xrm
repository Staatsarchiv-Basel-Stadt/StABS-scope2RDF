output r2rml

/* Basis-Map
 * ----------
 * - für alle RecordResourcen
 */

map rr_stabs from MVK_OGD.VE_STABS_RR_BASE {
	subject template rrURI with ID_NR;

	types
		rico.RecordResource

	properties
		rico.title from TITEL with language-tag ger;
		rico.identifier from SIGNATUR;
		rico.hasOrHadIdentifier template refcodeURI with SIGNATUR;
		rico.date from ENTSTEHUNGSZEITRAUM;
		rico.scopeAndContent from DARIN with language-tag ger; // Hervorzuhebende Inhalte von 3.3.1 @todo: sollte in eigene Unterklasse modelliert werden
		rico.scopeAndContent from ENTHAELT with language-tag ger; // Hauptgegenstand von isadg 3.3.1 @todo: sollte in eigene Unterklasse modelliert werden
		rico.^type from ARCHIVALIENART with language-tag ger; // @todo: sollte als Klasse modelliert werden, s.u. je Klassenlevel
		rico.conditionsOfAccess from ZUGANGSBESTIMMUNGEN with language-tag ger; // ausbauen gemäss Regelwerk (Klasse rico:Rule)
		rico.conditionsOfUse from ZUGAENGLICHKEIT_NM with language-tag ger; // besser als Klasse zu lösen (rico:Rule)
		rico.hasOrHadIdentifier template _ident with ID_NR as BlankNode;
		rico.isAssociatedWithDate template dateURI with ID_NR;
		rico.hasRecordSetType template rstypeURI with STUFE;

		dct.isReferencedBy template queryURL with ID_NR;
}

/* Description Level Classes
 * -------------------------
 * - builds the main RecordResource Relations (include and constitute)
 * - sets the RecordSetType
 */

map level_archive from MVK_OGD.VE_STABS_ARCHIV {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet

	properties
		rico.history from ARCHIVGESCHICHTE with language-tag ger; // @todo: use rico.Event class later
}

map level_abt from MVK_OGD.VE_STABS_ABT {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet

	properties
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
}

map level_fonds from MVK_OGD.VE_FONDS {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet

	properties
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		rico.hasProvenance from AKTENBILDNER_PROVENIENZ_TEXT with language-tag ger;
}

map level_best from MVK_OGD.VE_BEST {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet

	properties
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		rico.hasProvenance from AKTENBILDNER_PROVENIENZ_TEXT with language-tag ger;
		// rico.hasOrHadAllMembersWithContentType from ARCHIVALIENART // @todo: klären, ob generisch richtig, oder ob rico.hasOrHadSomeMembersWithContentType
}

map level_series from MVK_OGD.VE_SERIES {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet

	properties
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		// rico.hasOrHadAllMembersWithContentType from ARCHIVALIENART // @todo: klären, ob generisch richtig, oder ob rico.hasOrHadSomeMembersWithContentType
}

map level_dossier from MVK_OGD.VE_DOSSIER {
	subject template rrURI with ID_NR;

	types
		rico.Record

	properties
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		// rico.hasContentOfType template ctURI with ID_NR;// ARCHIVALIENART (3.1.5) @todo: sollte auf eigene Klasse gemappt werden
}

map level_dokument from MVK_OGD.VE_DOKUMENT {
	subject template rrURI with ID_NR;

	types
		rico.Record // @todo vorher testweise als RecordPart

	properties
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		// rico.hasContentOfType // ARCHIVALIENART (3.1.5) @todo s.o.
}

/* Identity Maps
 * -------------
 * * Signatur als eigene named instance
 * * übrige als blank nodes (@todo: sollte geändert werden)
 */
map ident_01 from MVK_OGD.VE_STABS_SIG {
	subject template refcodeURI with SIGNATUR;

	types
		rico.Identifier

	properties
		rico.hasIdentifierType constant "http://ld.staatsarchiv.bs.ch/vocabularies/IdentifierTypes#Signatur";
		rico.name from SIGNATUR;
		rico.descriptiveNote constant "Die Signatur dient zur eindeutigen Identifikation innerhalb des Archivs.";
}

map ident_02 from MVK_OGD.VE_STABS_SIG {
	subject template _ident with ID_NR as BlankNode;

	types
		rico.Identifier

	properties
		rico.hasIdentifierType constant "http://ld.staatsarchiv.bs.ch/vocabularies/IdentifierTypes#Fruehere-Signatur-im-Staatsarchiv";
		rico.name from FRUEHERE_STABS_SIGNATUR;
		rico.descriptiveNote constant "Signaturen, die früher im Gebrauch waren. Signaturen können bei einer Mutation automatisch in dieses Feld übertragen werden.";
}

map ident_03 from MVK_OGD.VE_STABS_SIG {
	subject template _ident with ID_NR as BlankNode;

	types
		rico.Identifier

	properties
		rico.hasIdentifierType constant "http://ld.staatsarchiv.bs.ch/vocabularies/IdentifierTypes#Alte-Signatur";
		rico.name from ALTE_SIGNATUREN;
		rico.descriptiveNote constant "Wird verwendet zur Angabe allfällig vorhandener alter Signaturen.";
		
}

/* Extent Maps
 * -----------
 * DE: LAUFMETER, ANZAHL, ANZAHL_DATEIEN, UMFANG_GESCHAETZT, KOMMENTAR_ZUM_UMFANG, DATENVOLUMEN_MB
 */

map extent_lm from MVK_OGD.VE_EXT_LM {
	subject template exlmURI with LAUFMETER;

	types
		rico.RecordResourceExtent

	properties
		rico.isExtentOf template rrURI with ID_NR;
		rico.hasExtentType constant "http://ld.staatsarchiv.bs.ch/vocabularies/ExtentTypes#Laufmeter";
		rico.quantity from LAUFMETER with datatype xsd.decimal;
		rico.hasUnitOfMeasurement constant "http://qudt.org/vocab/unit/M"; // @todo: als rico:UnitOfMeasurement
		rico.descriptiveNote constant "Laufmeter";
}

map extent_num from MVK_OGD.VE_NUM {
	subject template exnumURI with ANZAHL;

	types
		rico.RecordResourceExtent

	properties
		rico.isExtentOf template rrURI with ID_NR;
		rico.hasExtentType constant "http://ld.staatsarchiv.bs.ch/vocabularies/ExtentTypes#Anzahl";
		rico.quantity from ANZAHL with datatype xsd.integer;
		// rico.hasUnitOfMeasurement  // @todo: Einheiten oder Behältnisse als rico:UnitOfMeasurement
		rico.descriptiveNote constant "Anzahl Einheiten oder Behältnisse";
}

map extent_num_files from MVK_OGD.VE_NUM_FILES {
	subject template exnumfileURI with ANZAHL_DATEIEN;

	types
		rico.RecordResourceExtent

	properties
		rico.isExtentOf template rrURI with ID_NR;
		rico.hasExtentType constant "http://ld.staatsarchiv.bs.ch/vocabularies/ExtentTypes#Anzahl-Dateien";
		rico.quantity from ANZAHL_DATEIEN with datatype xsd.integer;
		// rico.hasUnitOfMeasurement  // @todo: Einheiten oder Behältnisse als rico:UnitOfMeasurement
		rico.descriptiveNote constant "Umfangangabe für Archivgut in digitaler Form, das aus Dateien besteht.";
}

map extent_data_vol from MVK_OGD.VE_DATA_VOLUME {
	subject template exdvURI with DATENVOLUMEN_MB;

	types
		rico.RecordResourceExtent

	properties
		rico.isExtentOf template rrURI with ID_NR;
		rico.hasExtentType constant "http://ld.staatsarchiv.bs.ch/vocabularies/ExtentTypes#Datenvolumen-MB";
		rico.quantity from DATENVOLUMEN_MB with datatype xsd.decimal;
		// rico.hasUnitOfMeasurement  // @todo: Einheiten oder Behältnisse als rico:UnitOfMeasurement
		rico.descriptiveNote constant "Angabe des enthaltenen Datenvolumens in Megabyte (MB)";
	
} 

map extent_approx from MVK_OGD.VE_EXT_APPROX {
	subject template exapproxURI with ID_NR;
	
	types
		rico.RecordResourceExtent
	
	properties
		rico.isExtentOf template rrURI with ID_NR;
		rico.hasExtentType constant "http://ld.staatsarchiv.bs.ch/vocabularies/ExtentTypes#Umfang-approximativ";
		rico.textualValue from UMFANG_GESCHAETZT;
		rico.descriptiveNote constant "Wert für den Umfang, wenn keine präzisen Zahlen vorliegen.";
}

/* Provenienz
 * ----------
 * * erster Versuch
 */
map prov_1 from MVK_OGD.PROV_1 {
	subject template agURI with PR_ID;

	types
		rico.Agent

	properties
		rico.name from PR_NAME;
		rico.isProvenanceOf template rrURI with VE_ID;
}

/* Verwaltungsgeschichte / Biografische Angaben
 * --------------------------------------------
 * (prüfen, ob als Event/1234 rico:isEventAssociatedWith Record/1234)
 */
 
map bioghist_1 from MVK_OGD.BIOGHIST {
	subject template rrURI with ID_NR;

	types
		rico.RecordResource

	properties
		rico.history from VERWALTUNGSGESCHICHTE_BIOGRAFI with language-tag ger;
}

/* Descriptors (scope Concept)
 * --------------------------
 * * Erstelle Auth-Records / Thesaurus-Records in skos
 * * Erstelle Agent-/ und Place-Subjects (optional)
 * * Verbinde mit RiC-R020
 */
map thes_records from MVK_OGD.TH_BASE {
	subject template rrURI with ID_NR;

	types
		rico.Record
		skos.Concept

	properties
		rico.title from BEZEICHNUNG with language-tag ger;
		rico.descriptiveNote from BESCHREIBUNG with language-tag ger;
		rico.hasDocumentaryFormType constant "https://www.ica.org/standards/RiC/vocabularies/documentaryFormTypes#AuthorityRecord";
		skos.prefLabel from BEZEICHNUNG with language-tag ger;
		skos.note from BESCHREIBUNG with language-tag ger;
		skos.inScheme template thtypeURI with THESAURUS;
}

map thes_rel from MVK_OGD.TH_REL {
	subject template rrURI with ID_NR_1;

	types
		rico.Record
		skos.Concept

	properties
		rico.isRecordResourceAssociatedWithRecordResource template rrURI with ID_NR_2;
		skos.related template rrURI with ID_NR_2;
}

map rr2authrec from MVK_OGD.VE_DESC_LINK {
	subject template rrURI with ID_NR_VRZNG_ENHT;

	types
		rico.RecordResource

	properties
		rico.hasOrHadMainSubject template rrURI with ID_NR_DSKRP;
}

/* Ablieferungen
 * ------------
 * sind rico:Activity-Instanzen
 * @todo: Activity-Types als Klasse (rico:Activity) mit rico:hasActivityType
 */

map abl from MVK_OGD.ABL {
	subject template evURI with ID_NR;

	types
		rico.Activity

	properties
		rico.name template "Ablieferung Nr. {0}" with JAHR_LAUF_NR as Literal;
		rico.identifier from ID_NR with datatype xsd.string;
		rico.^type template "Typ {0} / Subtyp {1}" with TYP SUBTYP as Literal;
		rico.agentOrActivityIsTargetOfProvenanceRelation from AKTENBILDENDE_STELLE; // @sicher falsch
		rico.date from ZEITRAUM_PERIODE; // @todo: falsch, da nicht Zeitraum der Aktivität, sondern des Bestands
		// rico.isAssociatedWithDate from ZEITRAUM_PERIODE;
}

map abl2ve from MVK_OGD.VE_ABL_LINK {
	subject template rrURI with ID_NR_VRZNG_ENHT;

	properties
		rico.resultsOrResultedFrom template evURI with ID_NR_ABLFR;
}

