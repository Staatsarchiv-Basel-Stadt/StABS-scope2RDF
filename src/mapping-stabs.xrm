output r2rml

map rr_stabs from WSD_STABS_SCP_ARCHIV_DBA.VE_STABS_RR_BASE {
	subject template rrURI with ID_NR;

	types
		rico.RecordResource

	properties
		rico.name from TITEL;
		rico.identifier from SIGNATUR with language-tag zxx;
		rico.date from ENTSTEHUNGSZEITRAUM;
		rico.scopeAndContent from DARIN with language-tag ger; // Hervorzuhebende Inhalte von 3.3.1 @todo: sollte in eigene Unterklasse modelliert werden
		rico.scopeAndContent from ENTHAELT with language-tag ger; // Hauptgegenstand von isadg 3.3.1 @todo: sollte in eigene Unterklasse modelliert werden
		rico.^type from ARCHIVALIENART with language-tag ger; // @todo: sollte als Klasse modelliert werden, s.u. je Klassenlevel
		rico.conditionsOfAccess from ZUGANGSBESTIMMUNGEN with language-tag ger; // ausbauen gemäss Regelwerk
		rico.conditionsOfUse from ZUGAENGLICHKEIT_NM with language-tag ger; // besser als Klasse zu lösen

		rico.hasOrHadIdentifier template identURI with ID_NR;
		rico.isAssociatedWithDate template dateURI with ID_NR;
}

map inst_dossier from WSD_STABS_SCP_ARCHIV_DBA.VE_DOSSIER {
	subject template instURI with ID_NR;

	properties
		//rico.physicalCharacteristics 
		rico.physicalOrLogicalExtent from ANZAHL; // @todo: verwende Klasse rico:Extent
		rico.productionTechnique from TECHNIK;
}

map inst_dokument from WSD_STABS_SCP_ARCHIV_DBA.VE_DOKUMENT {
	subject template instURI with ID_NR;

	properties
		//rico.physicalCharacteristics
		rico.physicalOrLogicalExtent from ANZAHL; // @todo: verwende Klasse rico:Extent
		rico.productionTechnique from TECHNIK;
}


/* Description Level Classes
 * -------------------------
 * * builds the main RecordResource Relations (include and constitute)
 * * sets the RecordSetType
 */

map level_archive from WSD_STABS_SCP_ARCHIV_DBA.VE_STABS_ARCHIV {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet
	    
	 properties
		rico.name from TITEL with language-tag ger;
		rico.identifier from SIGNATUR with language-tag zxx;
		rico.history from ARCHIVGESCHICHTE with language-tag ger; // use rico.Event class later
}

map level_abt from WSD_STABS_SCP_ARCHIV_DBA.VE_STABS_ABT {
	subject template rrURI with ID_NR;
	
	types
		rico.RecordSet
		
	properties
		rico.hasRecordSetType constant "http://ld.staatsarchiv.bs.ch/vocabularies/recordSetTypes#Abteilung";
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
}

map level_fonds from WSD_STABS_SCP_ARCHIV_DBA.VE_FONDS {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet
		
	properties
		rico.hasRecordSetType constant "http://ld.staatsarchiv.bs.ch/vocabularies/recordSetTypes#Fonds";
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		// rico.hasOrHadAllMembersWithContentType from ARCHIVALIENART // @todo: klären, ob generisch richtig, oder ob rico.hasOrHadSomeMembersWithContentType
}

map level_best from WSD_STABS_SCP_ARCHIV_DBA.VE_BEST {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet
		
	properties
		rico.hasRecordSetType constant "http://ld.staatsarchiv.bs.ch/vocabularies/recordSetTypes#Bestand";
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		// rico.hasOrHadAllMembersWithContentType from ARCHIVALIENART // @todo: klären, ob generisch richtig, oder ob rico.hasOrHadSomeMembersWithContentType
}

map level_series from WSD_STABS_SCP_ARCHIV_DBA.VE_SERIES {
	subject template rrURI with ID_NR;

	types
		rico.RecordSet

	properties
		rico.hasRecordSetType constant "http://ld.staatsarchiv.bs.ch/vocabularies/recordSetTypes#Serie";
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		// rico.hasOrHadAllMembersWithContentType from ARCHIVALIENART // @todo: klären, ob generisch richtig, oder ob rico.hasOrHadSomeMembersWithContentType
}

map level_dossier from WSD_STABS_SCP_ARCHIV_DBA.VE_DOSSIER {
	subject template rrURI with ID_NR;

	types
		rico.Record

	properties
		rico.hasRecordSetType constant "http://ld.staatsarchiv.bs.ch/vocabularies/recordSetTypes#Dossier";
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		rico.hasInstantiation template instURI with ID_NR;
		// rico.hasContentOfType template ctURI with ID_NR;// ARCHIVALIENART (3.1.5) @todo: sollte auf eigene Klasse gemappt werden
}

map level_dokument from WSD_STABS_SCP_ARCHIV_DBA.VE_DOKUMENT {
	subject template rrURI with ID_NR;

	types
		rico.Record // @todo vorher testweise als RecordPart

	properties
		rico.hasRecordSetType constant "http://ld.staatsarchiv.bs.ch/vocabularies/recordSetTypes#Dokument";
		rico.isOrWasIncludedIn template rrURI with PARENT_ID_NR;
		rico.hasInstantiation template instURI with ID_NR;
		// rico.hasContentOfType // ARCHIVALIENART (3.1.5) @todo s.o.
}

/* Subject links (to nowhere)
 * --------------------------
 * @todo: Subjects erstellen
 * @todo: funktioniert so nicht, da unklar, ob es sich beim Objekt um einen Agent oder Place handelt
 */

map rr2subject from WSD_STABS_SCP_ARCHIV_DBA.VE_DESC_LINK {
	subject template rrURI with ID_NR_VRZNG_ENHT;

	types
		rico.RecordResource

	properties
		rico.hasOrHadSubject template thURI with ID_NR_DSKRP;
}